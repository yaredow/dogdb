name: Publish and Deploy

on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  SERVER_IMAGE_NAME: ${{github.actor}}/dogdb-backend:latest
  DB_IMAGE_NAME: ${{github.actor}}/dogdb-postgres:latest
  FRONTEND_IMAGE_NAME: ${{github.actor}}/dogdb-frontend:latest

jobs:
  publish:
    name: Publish images
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Log in to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{env.REGISTRY}}
          username: ${{secrets.GH_USER}}
          password: ${{secrets.GH_SECRET}}

      # Build and Push Docker Compose Images
      - name: Build and Push Docker Compose Images
        working_directory: ./
        run: |
          # Use docker-compose to build and tag the images
          docker compose -f ./docker-compose.yml build

          # Push backend image
          docker push ${{env.REGISTRY}}/${{env.SERVER_IMAGE_NAME}}

          # Push frontend image
          docker push ${{env.REGISTRY}}/${{env.FRONTEND_IMAGE_NAME}}

      # Tag and Push PostgreSQL image to GitHub Container Registry
      - name: Tag and Push Postgres Image
        run: |
          # Pull the latest postgres image from Docker Hub
          docker pull postgres:latest

          # Tag it with your GitHub Container Registry namespace
          docker tag postgres:latest ${{env.REGISTRY}}/${{env.DB_IMAGE_NAME}}

          # Push the tagged image to GitHub Container Registry
          docker push ${{env.REGISTRY}}/${{env.DB_IMAGE_NAME}}

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: publish

    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd ${{ secrets.WORK_DIR }}
            # Log in to GitHub Container Registry on the VPS
            echo ${{ secrets.GH_SECRET }} | sudo docker login ghcr.io -u ${{ secrets.GH_USER }} --password-stdin
            # Stop and remove all running containers and network
            sudo docker compose down
            # Remove all unused images to free up space
            sudo docker image prune -a -f
            # Pull the newly built images from GitHub Packages
            sudo docker compose pull
            # Apply the changes and restart the services
            sudo docker compose up -d
