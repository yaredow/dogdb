"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nextjs-toploader";
exports.ids = ["vendor-chunks/nextjs-toploader"];
exports.modules = {

/***/ "(ssr)/./node_modules/nextjs-toploader/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nextjs-toploader/dist/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* __next_internal_client_entry_do_not_use__  cjs */ \nvar J = Object.create;\nvar y = Object.defineProperty;\nvar X = Object.getOwnPropertyDescriptor;\nvar _ = Object.getOwnPropertyNames;\nvar D = Object.getPrototypeOf, G = Object.prototype.hasOwnProperty;\nvar a = (r, o)=>y(r, \"name\", {\n        value: o,\n        configurable: !0\n    });\nvar Q = (r, o)=>{\n    for(var i in o)y(r, i, {\n        get: o[i],\n        enumerable: !0\n    });\n}, M = (r, o, i, g)=>{\n    if (o && typeof o == \"object\" || typeof o == \"function\") for (let c of _(o))!G.call(r, c) && c !== i && y(r, c, {\n        get: ()=>o[c],\n        enumerable: !(g = X(o, c)) || g.enumerable\n    });\n    return r;\n};\nvar N = (r, o, i)=>(i = r != null ? J(D(r)) : {}, M(o || !r || !r.__esModule ? y(i, \"default\", {\n        value: r,\n        enumerable: !0\n    }) : i, r)), V = (r)=>M(y({}, \"__esModule\", {\n        value: !0\n    }), r);\nvar Z = {};\nQ(Z, {\n    default: ()=>Y\n});\nmodule.exports = V(Z);\nvar t = N(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\")), v = N(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\")), s = N(__webpack_require__(/*! nprogress */ \"(ssr)/./node_modules/nprogress/nprogress.js\"));\nvar O = a(({ color: r, height: o, showSpinner: i, crawl: g, crawlSpeed: c, initialPosition: L, easing: T, speed: E, shadow: x, template: k, zIndex: H = 1600, showAtBottom: S = !1, showForHashAnchor: z = !0 })=>{\n    let C = \"#29d\", m = r != null ? r : C, K = o != null ? o : 3, W = !x && x !== void 0 ? \"\" : x ? `box-shadow:${x}` : `box-shadow:0 0 10px ${m},0 0 5px ${m}`, j = v.createElement(\"style\", null, `#nprogress{pointer-events:none}#nprogress .bar{background:${m};position:fixed;z-index:${H};${S ? \"bottom: 0;\" : \"top: 0;\"}left:0;width:100%;height:${K}px}#nprogress .peg{display:block;position:absolute;right:0;width:100px;height:100%;${W};opacity:1;-webkit-transform:rotate(3deg) translate(0px,-4px);-ms-transform:rotate(3deg) translate(0px,-4px);transform:rotate(3deg) translate(0px,-4px)}#nprogress .spinner{display:block;position:fixed;z-index:${H};${S ? \"bottom: 15px;\" : \"top: 15px;\"}right:15px}#nprogress .spinner-icon{width:18px;height:18px;box-sizing:border-box;border:2px solid transparent;border-top-color:${m};border-left-color:${m};border-radius:50%;-webkit-animation:nprogress-spinner 400ms linear infinite;animation:nprogress-spinner 400ms linear infinite}.nprogress-custom-parent{overflow:hidden;position:relative}.nprogress-custom-parent #nprogress .bar,.nprogress-custom-parent #nprogress .spinner{position:absolute}@-webkit-keyframes nprogress-spinner{0%{-webkit-transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg)}}@keyframes nprogress-spinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}`), u = a((h)=>new URL(h, window.location.href).href, \"toAbsoluteURL\"), B = a((h, f)=>{\n        let l = new URL(u(h)), b = new URL(u(f));\n        return l.href.split(\"#\")[0] === b.href.split(\"#\")[0];\n    }, \"isHashAnchor\"), F = a((h, f)=>{\n        let l = new URL(u(h)), b = new URL(u(f));\n        return l.hostname.replace(/^www\\./, \"\") === b.hostname.replace(/^www\\./, \"\");\n    }, \"isSameHostName\");\n    return v.useEffect(()=>{\n        s.configure({\n            showSpinner: i != null ? i : !0,\n            trickle: g != null ? g : !0,\n            trickleSpeed: c != null ? c : 200,\n            minimum: L != null ? L : .08,\n            easing: T != null ? T : \"ease\",\n            speed: E != null ? E : 200,\n            template: k != null ? k : '<div class=\"bar\" role=\"bar\"><div class=\"peg\"></div></div><div class=\"spinner\" role=\"spinner\"><div class=\"spinner-icon\"></div></div>'\n        });\n        function h(e, d) {\n            let n = new URL(e), p = new URL(d);\n            if (n.hostname === p.hostname && n.pathname === p.pathname && n.search === p.search) {\n                let w = n.hash, P = p.hash;\n                return w !== P && n.href.replace(w, \"\") === p.href.replace(P, \"\");\n            }\n            return !1;\n        }\n        a(h, \"isAnchorOfCurrentUrl\");\n        var f = document.querySelectorAll(\"html\");\n        let l = a(()=>f.forEach((e)=>e.classList.remove(\"nprogress-busy\")), \"removeNProgressClass\");\n        function b(e) {\n            for(; e && e.tagName.toLowerCase() !== \"a\";)e = e.parentElement;\n            return e;\n        }\n        a(b, \"findClosestAnchor\");\n        function A(e) {\n            try {\n                let d = e.target, n = b(d), p = n == null ? void 0 : n.href;\n                if (p) {\n                    let w = window.location.href, P = n.target === \"_blank\", q = [\n                        \"tel:\",\n                        \"mailto:\",\n                        \"sms:\",\n                        \"blob:\",\n                        \"download:\"\n                    ].some((I)=>p.startsWith(I));\n                    if (!F(window.location.href, n.href)) return;\n                    let $ = h(w, p) || B(window.location.href, n.href);\n                    if (!z && $) return;\n                    p === w || P || q || $ || e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || !u(n.href).startsWith(\"http\") ? (s.start(), s.done(), l()) : s.start();\n                }\n            } catch (d) {\n                s.start(), s.done();\n            }\n        }\n        a(A, \"handleClick\"), ((e)=>{\n            let d = e.pushState;\n            e.pushState = (...n)=>(s.done(), l(), d.apply(e, n));\n        })(window.history), ((e)=>{\n            let d = e.replaceState;\n            e.replaceState = (...n)=>(s.done(), l(), d.apply(e, n));\n        })(window.history);\n        function R() {\n            s.done(), l();\n        }\n        a(R, \"handlePageHide\");\n        function U() {\n            s.done();\n        }\n        return a(U, \"handleBackAndForth\"), window.addEventListener(\"popstate\", U), document.addEventListener(\"click\", A), window.addEventListener(\"pagehide\", R), ()=>{\n            document.removeEventListener(\"click\", A), window.removeEventListener(\"pagehide\", R), window.removeEventListener(\"popstate\", U);\n        };\n    }, []), j;\n}, \"NextTopLoader\"), Y = O;\nO.propTypes = {\n    color: t.string,\n    height: t.number,\n    showSpinner: t.bool,\n    crawl: t.bool,\n    crawlSpeed: t.number,\n    initialPosition: t.number,\n    easing: t.string,\n    speed: t.number,\n    template: t.string,\n    shadow: t.oneOfType([\n        t.string,\n        t.bool\n    ]),\n    zIndex: t.number,\n    showAtBottom: t.bool\n}; /**\n *\n * NextTopLoader\n * @license MIT\n * @param {NextTopLoaderProps} props The properties to configure NextTopLoader\n * @returns {React.JSX.Element}\n *\n */  //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/nextjs-toploader/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nextjs-toploader/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nextjs-toploader/dist/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* __next_internal_client_entry_do_not_use__  cjs */ 
const { createProxy } = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");
module.exports = createProxy("/home/yared/Documents/code/dogdb/node_modules/nextjs-toploader/dist/index.js");
 /**
 *
 * NextTopLoader
 * @license MIT
 * @param {NextTopLoaderProps} props The properties to configure NextTopLoader
 * @returns {React.JSX.Element}
 *
 */  //# sourceMappingURL=index.js.map


/***/ })

};
;