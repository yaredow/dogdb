// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                       String         @id @default(cuid())
  firstName                String
  lastName                 String
  email                    String?        @unique
  emailVerified            DateTime?
  password                 String?
  image                    String?
  role                     UserRole       @default(USER)
  updatedAt                DateTime       @updatedAt
  bio                      String?        @default("")
  userName                 String?        @unique @default("")
  breeds                   UserBreed[]
  followers                Follows[]      @relation("following")
  following                Follows[]      @relation("follower")
  createdAt                DateTime       @default(now())
  conversations            Conversation[] @relation("UserConversations")
  seenMessages             Message[]      @relation("SeenMessages")
  messages                 Message[]
  blockedUsers             Block[]        @relation("blocker")
  blockedBy                Block[]        @relation("blocked")
  active                   Boolean        @default(true)
  verified                 Boolean        @default(false)
  passwordChangedAt        DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  emailVerificationToken   String?
  emailVerificationExpires DateTime?

  @@map("users")
}

model PasswordResetToken {
  id String @id @default(cuid())

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_token")
}

model Block {
  id String @id @default(cuid())

  blockerId String
  blocker   User   @relation("blocker", fields: [blockerId], references: [id])

  blockedId String
  blocked   User   @relation("blocked", fields: [blockedId], references: [id])

  createdAt DateTime @default(now())

  @@unique([blockerId, blockedId])
}

model Follows {
  id String @id @default(cuid())

  followerId String
  follower   User   @relation("follower", fields: [followerId], references: [id])

  followingId String
  following   User   @relation("following", fields: [followingId], references: [id])

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
}

model Conversation {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?

  messages Message[]

  users User[] @relation("UserConversations")

  @@map("conversations")
}

model Message {
  id String @id @default(cuid())

  body      String?
  image     String?
  createdAt DateTime @default(now())

  seen           User[]       @relation("SeenMessages")
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model UserBreed {
  id      String @id @default(cuid())
  userId  String
  breedId String

  user  User  @relation(fields: [userId], references: [id])
  breed Breed @relation(fields: [breedId], references: [id])

  @@unique([userId, breedId])
  @@map("user_breed")
}

model Breed {
  id String @id @default(cuid())

  breedName             String
  breedShortDescription String
  breedLongDescription  String
  breedCharacteristics  String[]
  breedImages           String[]
  traits                String[]
  diseases              String[]
  averageHeight         Int
  averageWeight         Int
  lifeExpectancy        Int
  temperament           String
  hairShedding          String
  activity              String
  sociability           String
  intelligence          String
  childFriendly         String
  careLevel             String
  healthProblems        String
  geneticProfile        String
  feedingHabits         String
  slug                  String   @unique

  user UserBreed[]
}
